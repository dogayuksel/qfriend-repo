// An example of Firebase security and modeling language.
// https://github.com/firebase/bolt/blob/master/docs/guide.md

// Functions

isSignedIn() { auth != null }
isViewer(uid) { isSignedIn() && auth.uid == uid }
isAdmin() { root.admins.hasChildren([auth.uid]) }
// isFriend(uid) { true } // We can limit access to sensitive data easily.

// Types

// github.com/firebase/bolt/blob/master/docs/guide.md#dealing-with-timestamps
type CurrentTimestamp extends Number {
  validate() { this == now }
}

type ShortString extends String {
  validate() { this.length <= 100 }
}

type ShortRequiredString extends String {
  // Required form field with maxLength="100".
  validate() { this.length > 0 && this.length <= 100 }
}

type LongString extends String {
  validate() { this.length <= 1000 }
}

type LongRequiredString extends String {
  validate() { this.length > 0 && this.length <= 1000 }
}

type ExtraLongString extends String {
  validate() { this.length <= 10000 }
}

type ExtraLongRequiredString extends String {
  validate() { this.length > 0 && this.length <= 10000 }
}

type HelloWorld {
  createdAt: CurrentTimestamp,
  text: ShortString
}

type User {
  displayName: LongString,
  id: ShortRequiredString,
  photoURL: LongString,
  validate() { this.id == auth.uid }
}

type QueueEntry {
  loggedAt: CurrentTimestamp,
  value: Number,
  venueKey: Number,
  owner: User,
}

type Event {
  beginsAt: Number,
  name: LongString,
  description: LongString,
  photoURL: LongString,
  residentAdvisorURL: LongString,
  facebookEventURL: LongString,
  venueKey: ShortString,
  isFeatured: Boolean,
}

type UserEmail {
  email: ShortRequiredString
}

type UserPresence {
  lastSeenAt: CurrentTimestamp,
  user: User
}

type Admin {
}

// Paths

path /hello-world is HelloWorld {
  // Anyone can create, read, update. No one can delete.
  create() { true }
  read() { true }
  update() { true }
}

path /locations {
  // Anyone can create, read, update. No one can delete.
  read() { true }
  write() { isAdmin() }
}

path /events/{event} is Event {
  // Anyone can create, read, update. No one can delete.
  read() { true }
  write() { isAdmin() }
}

path /events {
  read() { true }
}

path /events {
  index() {[ "beginsAt", "venueKey" ]}
}

path /queues/{queue} is QueueEntry {
  read() { true }
  write() { isAdmin() }
}

path /queues {
  read() { true }
}

path /queues {
  index() {[ "loggedAt", "venueKey" ]}
}

path /users/{uid} is User {
  read() { true }
  write() { isViewer(uid) }
}

path /users-emails/{uid} is UserEmail {
  read() { isViewer(uid) }
  write() { isViewer(uid) }
}

path /admins/{uid} is Admin {
  read() { isViewer(uid) }
}

path /users-presence {
  read() { true }
  // Sure we can limit access. For example with isFriend.
}

path /users-presence/{uid} is UserPresence[] {
  create() { isViewer(uid) }
  // TODO: Add isViewer and isFirebaseServer somehow.
  update() { true }
  delete() { true }
}
